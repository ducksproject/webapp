/**
 * Radix Babylon Gateway API
 * This API is designed to enable clients to efficiently query information on the RadixDLT ledger, and allow clients to build and submit transactions to the network. It is designed for use by wallets and explorers.  This document is an API reference documentation, visit [User Guide](https://docs.radixdlt.com/main/apis/gateway-api.html) to learn more about different usage scenarios.  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway), which is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract and index data from the network.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { EntityDetailsRequest, EntityDetailsResponse, EntityFungiblesRequest, EntityFungiblesResponse, EntityMetadataRequest, EntityMetadataResponse, EntityNonFungibleIdsRequest, EntityNonFungibleIdsResponse, EntityNonFungiblesRequest, EntityNonFungiblesResponse, EntityOverviewRequest, EntityOverviewResponse, EntityResourcesRequest, EntityResourcesResponse, NonFungibleDataRequest, NonFungibleDataResponse, NonFungibleIdsRequest, NonFungibleIdsResponse, StateValidatorsListRequest, StateValidatorsListResponse } from '../models';
export interface EntityDetailsOperationRequest {
    entityDetailsRequest: EntityDetailsRequest;
}
export interface EntityFungiblesOperationRequest {
    entityFungiblesRequest: EntityFungiblesRequest;
}
export interface EntityMetadataOperationRequest {
    entityMetadataRequest: EntityMetadataRequest;
}
export interface EntityNonFungibleIdsOperationRequest {
    entityNonFungibleIdsRequest: EntityNonFungibleIdsRequest;
}
export interface EntityNonFungiblesOperationRequest {
    entityNonFungiblesRequest: EntityNonFungiblesRequest;
}
export interface EntityOverviewOperationRequest {
    entityOverviewRequest: EntityOverviewRequest;
}
export interface EntityResourcesOperationRequest {
    entityResourcesRequest: EntityResourcesRequest;
}
export interface NonFungibleIdDataRequest {
    nonFungibleDataRequest: NonFungibleDataRequest;
}
export interface NonFungibleIdsOperationRequest {
    nonFungibleIdsRequest: NonFungibleIdsRequest;
}
export interface StateValidatorsListOperationRequest {
    stateValidatorsListRequest: StateValidatorsListRequest;
}
/**
 *
 */
export declare class StateApi extends runtime.BaseAPI {
    /**
     * Returns detailed information for a single entity.
     * Get Entity Details
     */
    entityDetailsRaw(requestParameters: EntityDetailsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityDetailsResponse>>;
    /**
     * Returns detailed information for a single entity.
     * Get Entity Details
     */
    entityDetails(requestParameters: EntityDetailsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityDetailsResponse>;
    /**
     * Returns the total amount of each fungible resource owned by a given global entity. The returned response is in a paginated format, ordered by the resource\'s first appearance on the ledger.
     * Get Entity Fungible Resource Totals
     */
    entityFungiblesRaw(requestParameters: EntityFungiblesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityFungiblesResponse>>;
    /**
     * Returns the total amount of each fungible resource owned by a given global entity. The returned response is in a paginated format, ordered by the resource\'s first appearance on the ledger.
     * Get Entity Fungible Resource Totals
     */
    entityFungibles(requestParameters: EntityFungiblesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityFungiblesResponse>;
    /**
     * Returns all the metadata properties associated with a given global entity. The returned response is in a paginated format, ordered by first appearance on the ledger.
     * Get Entity Metadata
     */
    entityMetadataRaw(requestParameters: EntityMetadataOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityMetadataResponse>>;
    /**
     * Returns all the metadata properties associated with a given global entity. The returned response is in a paginated format, ordered by first appearance on the ledger.
     * Get Entity Metadata
     */
    entityMetadata(requestParameters: EntityMetadataOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityMetadataResponse>;
    /**
     * Returns all non-fungible IDs of a given non-fungible resource owned by a given entity. The returned response is in a paginated format, ordered by the resource\'s first appearence on the ledger.
     * Get Entity Non-Fungible IDs
     */
    entityNonFungibleIdsRaw(requestParameters: EntityNonFungibleIdsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityNonFungibleIdsResponse>>;
    /**
     * Returns all non-fungible IDs of a given non-fungible resource owned by a given entity. The returned response is in a paginated format, ordered by the resource\'s first appearence on the ledger.
     * Get Entity Non-Fungible IDs
     */
    entityNonFungibleIds(requestParameters: EntityNonFungibleIdsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityNonFungibleIdsResponse>;
    /**
     * Returns the total amount of each non-fungible resource owned by a given global entity. The returned response is in a paginated format, ordered by the resource\'s first appearance on the ledger.
     * Get Entity Non-Fungible Resource Totals
     */
    entityNonFungiblesRaw(requestParameters: EntityNonFungiblesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityNonFungiblesResponse>>;
    /**
     * Returns the total amount of each non-fungible resource owned by a given global entity. The returned response is in a paginated format, ordered by the resource\'s first appearance on the ledger.
     * Get Entity Non-Fungible Resource Totals
     */
    entityNonFungibles(requestParameters: EntityNonFungiblesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityNonFungiblesResponse>;
    /**
     * Returns basic information (incomplete metadata) for a given collection of entities. This endpoint is intended to be used for populating screens which contain a small bit of information about multiple entities.
     * Get Entities Overview
     */
    entityOverviewRaw(requestParameters: EntityOverviewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityOverviewResponse>>;
    /**
     * Returns basic information (incomplete metadata) for a given collection of entities. This endpoint is intended to be used for populating screens which contain a small bit of information about multiple entities.
     * Get Entities Overview
     */
    entityOverview(requestParameters: EntityOverviewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityOverviewResponse>;
    /**
     * Returns the total amount of each fungible and non-fungible resources owned by a given global entity. The response for fungibles and non-fungibles is paginated, and only the first page of each is returned. The returned lists are ordered by the resource\'s first appearance on the ledger. For further pages, use the `entity/fungibles` and `entity/non-fungibles` endpoints. To get the owned non-fungible ids (instead of just the amount), use the `entity/non-fungible-ids` endpoint.
     * Get Entity Resource Totals
     */
    entityResourcesRaw(requestParameters: EntityResourcesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityResourcesResponse>>;
    /**
     * Returns the total amount of each fungible and non-fungible resources owned by a given global entity. The response for fungibles and non-fungibles is paginated, and only the first page of each is returned. The returned lists are ordered by the resource\'s first appearance on the ledger. For further pages, use the `entity/fungibles` and `entity/non-fungibles` endpoints. To get the owned non-fungible ids (instead of just the amount), use the `entity/non-fungible-ids` endpoint.
     * Get Entity Resource Totals
     */
    entityResources(requestParameters: EntityResourcesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityResourcesResponse>;
    /**
     * Returns data associated with a given non-fungible ID of a given non-fungible resource.
     * Get Non-Fungible Data
     */
    nonFungibleIdDataRaw(requestParameters: NonFungibleIdDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NonFungibleDataResponse>>;
    /**
     * Returns data associated with a given non-fungible ID of a given non-fungible resource.
     * Get Non-Fungible Data
     */
    nonFungibleIdData(requestParameters: NonFungibleIdDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NonFungibleDataResponse>;
    /**
     * Returns the non-fungible IDs of a given non-fungible resource. Returned response is in a paginated format, ordered by their first appearance on the ledger.
     * Get Non-Fungible Collection
     */
    nonFungibleIdsRaw(requestParameters: NonFungibleIdsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NonFungibleIdsResponse>>;
    /**
     * Returns the non-fungible IDs of a given non-fungible resource. Returned response is in a paginated format, ordered by their first appearance on the ledger.
     * Get Non-Fungible Collection
     */
    nonFungibleIds(requestParameters: NonFungibleIdsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NonFungibleIdsResponse>;
    /**
     * Get Validators List
     */
    stateValidatorsListRaw(requestParameters: StateValidatorsListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateValidatorsListResponse>>;
    /**
     * Get Validators List
     */
    stateValidatorsList(requestParameters: StateValidatorsListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateValidatorsListResponse>;
}
